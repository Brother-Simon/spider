use :node;

var Node = require('./Node').Node;

func CaseClause(tests, body) 
  extends Node {
  
  this.type = 'CaseClause';
  
  this.body = body;
  this.body.parent = this;
  
  this.tests = tests;
  if this.tests? {
    for test in this.tests {
      test.parent = this;
    }
  }
}

CaseClause.prototype.codegen = () -> {
  if !super.codegen() {
    return;
  }
  
  if !this.tests? {
    return this.body.codegen();
  }
  
  this.type = "IfStatement";
  
  var rangeError = false;
  
  for test in this.tests {
    var equalsToDiscriminant;
  
    if test.type == "Range" {
      var fromCheck;
      if test.from {
        fromCheck = {
          "type": "BinaryExpression",
          "operator": ">=",
          "left": this.parent.discriminant,
          "right": test.from
        };
      }
      
      var toCheck;
      if test.to {
        toCheck = {
          "type": "BinaryExpression",
          "operator": "<" + ("=" if test.operator == ".." else ""),
          "left": this.parent.discriminant,
          "right": test.to
        };
      }
      
      if fromCheck && toCheck {
        equalsToDiscriminant = {
          "type": "LogicalExpression",
          "operator": "&&",
          "left": fromCheck,
          "right": toCheck
        };
      } else if fromCheck || toCheck {
        equalsToDiscriminant = fromCheck ?? toCheck;
      } else {
        rangeError = test;
        return false;
      }
    } else {
      equalsToDiscriminant = {
        "type": "BinaryExpression",
        "operator": "===",
        "left": this.parent.discriminant,
        "right": test.codegen()
      };
    }
    
    if !this.test {
      this.test = equalsToDiscriminant;
    } else {
      this.test = {
        "type": "LogicalExpression",
        "operator": "||",
        "left": this.test,
        "right": equalsToDiscriminant
      };
    }
  }
  
  if rangeError {
    Node.getErrorManager().error({
      type: "EmptyRange",
      message: "empty range in case clause is disallowed.",
      loc: rangeError.loc
    });
    
    return null;
  }
        
  this.consequent = this.body.codegen();
  this.alternate = null;
  
  return this;
};

exports.CaseClause = CaseClause;